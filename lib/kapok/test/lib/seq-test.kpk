(ns seq-test
  (use seq)
  (use kunit))

(defn main []
  (test "test chunk"
    (assert (=== [[1 2] [3 4] [5 6]]
                 (chunk [1 2 3 4 5 6] 2)))
    (assert (=== [[1 2 3] [3 4 5]]
                 (chunk [1 2 3 4 5 6] 3 2)))
    (assert (=== [[1 2 3] [3 4 5] [5 6 7]]
                 (chunk [1 2 3 4 5 6] 3 2 [7])))
    (assert (=== [[1 2 3] [4 5 6]]
                 (chunk [1 2 3 4 5 6] 3 3 [])))
    )

  (test "test chunk-by"
    (assert (=== [[1] [2 2] [3] [4 4 6] [7 7]]
                 (chunk-by [1 2 2 3 4 4 6 7 7]
                           (fn [x]
                             (== (rem x 2) 1))))))

  (test "test drop"
    (assert (=== [3]
                 (drop [1 2 3] 2)))
    (assert (=== []
                 (drop [1 2 3] 10)))
    (assert (=== [1 2 3]
                 (drop [1 2 3] 0)))
    (assert (=== [1 2]
                 (drop [1 2 3] -1))))

  (test "test drop-while"
    (assert (=== [3 4 5]
                 (drop-while [1 2 3 4 5]
                             (fn [x]
                               (< x 3))))))

  (test "test empty?"
    (assert (=== :true
                 (empty? [])))
    (assert (=== :false
                 (empty? [1 2 3]))))

  (test "test filter"
    (assert (=== [2]
                 (filter [1 2 3] (fn [x]
                                   (== (rem x 2) 0))))))

  (test "test filter-map"
    (assert (=== [4]
                 (filter-map [1 2 3]
                             (fn [x]
                               (== (rem x 2) 0))
                             (fn [x]
                               (* x 2))))))

  (test "test find"
    (assert (=== :nil
                 (find [2 4 6]
                       (fn [x]
                         (== (rem x 2) 1)))))
    (assert (=== 0
                 (find [2 4 6]
                       0
                       (fn [x]
                         (== (rem x 2) 1)))))
    (assert (=== 3
                 (find [2 3 4]
                       (fn [x]
                         (== (rem x 2) 1))))))

  (test "test find-value"
    (assert (=== :nil
                 (find-value [2 4 6]
                             (fn [x]
                               (== (rem x 2) 1)))))
    (assert (=== :true
                 (find-value [2 3 4]
                             (fn [x]
                               (== (rem x 2) 1)))))
    (assert (=== "no bools!"
                 (find-value [1 2 3]
                             "no bools!"
                             (fn core boolean? 1)))))

  (test "test take"
    (assert (=== [1 2]
                 (take [1 2 3] 2)))
    (assert (=== [1 2 3]
                 (take [1 2 3] 10)))
    (assert (=== []
                 (take [1 2 3] 0)))
    (assert (=== [3]
                 (take [1 2 3] -1)))))
