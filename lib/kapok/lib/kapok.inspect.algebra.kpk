(defns kapok.inspect.opts
  """Defines the inspect.opts used by the inspect protocol.

  The following fields are available:

    * `#structs` - when `:false`, structs are not formatted by the inspect
      protocol, they are instead printed as maps, defaults to `:true`.

    * `#binaries` - when `#as-strings` all binaries will be printed as strings,
      non-printable bytes will be escaped.

      When `#as-binaries` all binaries will printed in bit syntax.

      When the default `#infer`, the binary will be printed as a string if it
      is printable, otherwise in bit syntax.

    * `#char-lists` - when `#as-char-lists` all lists will be printed as char
      lists, non-printable elements will be escaped.

      When `#as-lists` all lists will be printed as lists.

      When the default `#infer`, the list will be printed as a char list if it
      is printable, otherwise as list.

    * `#limit` - limits the number of items that are printed for tuples,
      bitstrings, and lists, does not apply to strings nor char lists, defaults
      to 50.

    * `#pretty` - if set to `:true` enables pretty printing, defaults to `:false`.

    * `#width` - defaults to the 80 characters, used when pretty is `:true` or
      when printing to IO devices.

    * `#base` - print integers as #binary, #octal, #decimal, or #hex, defaults to
      #decimal.

    * `#safe` - when `:false`, failures while inspecting structs will be raised
      as errors instead of being wrapped in the inspect.error exception. This
      is useful when debugging failures and crashes for custom inspect
      implementations.
  """

  (defstruct [kapok.access]
    (:structs :true)
    (:binaries #infer)
    (:char-lists #infer)
    (:limit 50)
    (:width 80)
    (:base #decimal)
    (:pretty :false)
    (:safe :true)))

(defns kapok.inspect.error
    """Raised when a struct cannot be inspected."""
    (defexception [{#message :nil}]))

(ns kapok.inspect.algebra
  """A set of functions for creating and manipulating algebra
  documents, as described in ["Strictly Pretty" (2000) by Christian Lindig][0].

  An algebra document is represented by an `inspect.algebra` node
  or a regular string.

      kapok> (inspect.algebra.empty)
      #doc-nil

      kapok> "foo"
      "foo"

  With the functions in this module, we can conatenate different
  elements together and render them:

      kapok> (let [doc (inspect.algebra.concat (inspect.algebra.empty) "foo")]
               (inspect.algebra.format doc 80))
      ["foo"]

  The functions `(nest 2)`, `(space 2)` and `(line 2)` help you put the
  document together into a rigid structure. However, the document
  algebra gets interesting when using functions like `(break 2)`, which
  converts the given string into a line break depending on how much space
  there is to print. Let's glue two docs together with a break and then
  render it:

      kapok> (let [doc (inspect.algebra.glue "a" " " "b")]
               (inspect.algebra.format doc 80))
      ["a" " " "b"]

  Notice the break was represented as is, because we haven't reached
  a line limit. Once we do, it is replaced by a newline:

      kapok> (let [doc (inspect.algebra.glue (string.duplicate "a" 20) " " "b")]
               (inspect.algebra.format doc 10))
      ["aaaaaaaaaaaaaaaaaaaa", "\n", "b"]

  Finally, this module also contains Kapok related functions, a bit
  tied to Kapok formatting, namely `(surround 3)` and `(surround-many 5)`.

  ## Implementation details

  The original Haskell implementation of the algorithm by [Wadler][1]
  relies on lazy evaluation to unfold document groups on two alternatives:
  `:flat` (breaks as spaces) and `:break` (breaks as newlines).
  Implementing the same logic in a strict language such as Kapok leads
  to an exponential growth of possible documents, unless document groups
  are encoded explictly as `:flat` or `:break`. Those groups are then reduced
  to a simple document, where the layout is already decided, per [Lindig][0].

  This implementation slightly changes the semantic of Lindig's algorithm
  to allow elements that belong to the same group to be printed together
  in the same line, even if they do not fit the line fully. This was achieved
  by changing `:break` to mean a possible break and `:flat` to force a flat
  structure. Then deciding if a break works as a newline is just a matter
  of checking if we have enough space until the next break that is not
  inside a group (which is still flat).

  Custom pretty printers can be implemented using the documents returned
  by this module and by providing their own rendering functions.

    [0]: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.2200
    [1]: http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf

  """

  (require binary
           maps
           (Elixir.System :as system)
           (Elixir.Process :as process)
           (kapok (access
                   io
                   inspect.opts
                   inspect.error
                   inspect
                   inspect.map))))

(attribute surround-separator "")
(attribute tail-separator " |")
(attribute newline "\n")
(attribute nesting 1)
(attribute break " ")

(defmacro- doc-cons [left right]
  `{#doc-cons ~left ~right})

(defmacro- doc-nest [doc indent]
  `{#doc-nest ~doc ~indent})

(defmacro- doc-break [break]
  `{#doc-break ~break})

(defmacro- doc-group [group]
  `{#doc-group ~group})

;; Used in guard
(defmacro- is-doc [doc]
  `(op-or (binary? ~doc)
          (=== ~doc #doc-nil)
          (=== ~doc #doc-line)
          ;; TODO revise after adding op orelse, or, etc. to guard
          (op-and (tuple? ~doc)
                  (=== (elem ~doc 0) #doc-cons))
          (op-and (tuple? ~doc)
                  (=== (elem ~doc 0) #doc-nest))
          (op-and (tuple? ~doc)
                  (=== (elem ~doc 0) #doc-break))
          (op-and (tuple? ~doc)
                  (=== (elem ~doc 0) #doc-group))))

(defn
    #{:check_remote_call :false}
    to-doc
  """Converts an Kapok structure to an algebra document
  according to the inspect protocol.
  """

  ([#{:__struct__ struct} &as map opts] (&when (atom? struct))
   (if (access.get opts #structs)
       (try (inspect.inspect map opts)
         (catch
           (e
            (let [st (system.stacktrace)]
              ;; Because we try to raise a nice error message in case
              ;; we can't inspect a struct, there is a chance the error
              ;; message itself relies on the struct being printed, so
              ;; we need to trap the inspected messages to guarantee
              ;; we won't try to render any failed instruct when building
              ;; the error message.
              (if (process.get #inspect-trap)
                  (inspect.map.inspect map opts)
                (try (do
                      (process.put #inspect-trap :true)
                      (let [res1 (inspect.map.inspect map opts)
                            res2 (io.iodata-to-binary (format res1 #infinity))
                            message (io_lib.format "got ~p with message ~s while inspecting ~p"
                                      [(inspect (access.get e #__struct__))
                                       (exception.message e)
                                       res2])
                            exception (inspect.error.exception [{#message message}])]
                        (if (access.get opts #safe)
                            (inspect.inspect exception opts)
                          (reraise exception st))))
                  (after
                   (process.delete #inspect-trap))))))))
     (inspect.map.inspect map opts))))

(defn
    #{:check_remote_call :false}
    to-doc [arg #{#__struct__ #'kapok.inspect.opts'} &as opts]
  (inspect.inspect arg opts))

(defn empty []
  """Returns a document entity used to represent nothingness.

  ## Examples

      kapok> (inspect.algebra.empty)
      #doc_nil

  """
  #dot_nil)

(defn concat [x y] (&when (&and (is-doc x)
                                (is-doc y)))
  """Concatenates two document entities.

  ## Exmaples

      kapok> (let [doc (inspect.algebra.concat "hello" "world")]
               (inspect.algebra.format doc 80))
      ["hello" "world"]

  """
  (doc-cons x y))

(defn concat [docs]
  "Concatenates a list of documents."
  (folddoc docs (fn [x y] (concat x y))))

(defn nest [x 0] (&when (is-doc x))
  """Nests document entity `x` positions deep.

  Nesting will be appended to the line breaks.

  ## Examples

      kapok> (let [doc (inspect.algebra.nest
                         (inspect.algebra.glue "hello" "world")
                         5)]
              (inspect.algebra.format doc 5))
      ["hello" "\n     " "world"]

  """
  x)

(defn nest [x i] (&when (&and (is-doc x)
                              (integer? i)))
  (doc-nest x i))

(defn break [s] (&when (binary? s))
  """Document entity representing a break.

  This break can be rendered as a linkbreak or as spaces,
  depending on the `mode` of the chosen layout or the provided
  separator.

  ## Examples

  Let's glue two docs together with a break and then render it.

      kapok> (let [doc (inspect.algebra.glue "a" " " "b")]
              (inspect.algebra.format doc 80))
      ["a" " " "b"]

  Notice the break was represented as is, because we haven't reached
  a line limit. Once we do, it is replaced by a newline:

      kapok> (let [doc (inspect.algebra.glue (string.duplicate "a" 20) " " "b")]
              (inspect.algebra.format doc 10))
      ["aaaaaaaaaaaaaaaaaaaa", "\n", "b"]

  """
  (doc-break s))

(defn break []
  (doc-break (attr #break)))

(defn glue [x y]
  "Inserts a break between two docs. See `(break 1)` for more info."
  (concat x (concat (break) y)))

(defn glue [x g y]
  """Inserts a break, passed as the second argument, between two docs,
  the first and the third arguments.
  """
  (concat x (concat (break g) y)))

(defn group [d] (&when (is-doc d))
  """Returns a group containing the specified document.

  ## Examples

      kapok> (let [doc (inspect.algebra.group
                        (inspect.algebra.concat
                         (inspect.algebra.concat
                          "Hello,"
                          (inspect.algebra.concat
                           (inspect.algebra.concat
                            (inspect.algebra.break)
                            "A")))
                         (inspect.algebra.concat
                          (inspect.algebra.break)
                          "B")))]
                (inspect.algebra.format doc 80)
                ;;=> ["Hello,", " ", "A", " ", "B"]
                (inspect.algebra.format doc 6)
                ;;=> ["Hello,", "\n", "A", " ", "B"])

  """
  (doc-group d))

(defn space [x y]
  """Inserts a mandatory single space between two document entities.

  ## Examples

      kapok> (let [doc (inspect.algebra.space "Hughes" "Wadler")]
              (inspect.algebra.format doc 80))
      ["Hughes" " " "Wadler"]

  """
  (concat x (concat " " y)))

(defn line [x y]
  """Inserts a mandatory linebreak between two document entities.

  ## Examples

      kapok> (let [doc (inspect.algebra.line "Hughes" "Wadler")]
              (inspect.algebra.format doc 80))
      ["Hughes" "\n" "Wadler"]

  """
  (concat x (concat #doc_line y)))

(defn folddoc
  """Folds a list of document entities into a document entity
  using a function that is passed as the first argument.

  ## Examples

      kapok> (let [doc1 ["A" "B"]
                   doc2 (inspect.algebra.folddoc doc (fn [x y]
                                                       (inspect.algebra.concat x "!" y)))]
              (inspect.algebra.format doc 80))
      ["A" "!" "B"]

  """

  ([[] _]
   (empty))

  ([[doc] _]
   doc)

  ([[d & ds] fun]
   (fun d (folddoc ds fun))))

(defn surround [left doc right]
  """Surrounds a document with characters.

  Puts the document between left and right enclosing and nesting it.
  The document is marked as a group, to show the maximum as possible
  concisely together.

  ## Examples

      kapok> (let [doc (inspect.algebra.surround
                        "[" (inspect.algebra.glue "a" "b") "]")]
              (inspect.algebra.format doc 3))
      ["[" "a" "\n " "b" "]"]

  """
  (group (concat left (concat (nest doc (attr #nesting)) right))))

(defn surround-many [left docs right opts fun &optional (separator (attr #surround-separator))]
  """Maps and glues a collection of items.

  It uses the given left and right as surrounding and a separator for
  each item. A limit can be passed which, once reached, stops gluing
  and outputs "..." instead.

  ## Examples

      kapok> (let [opts (inspect.opts.new :limit #infinity)
                   doc (inspect.algebra.surround-many
                         "[" [1 2 3 4 5] "]" opts (fn [i _opts] (to_string i)))]
              (-> (inspect.algebra.format doc 5))
                  io.iodata_to_binary))
      "[1 \n 2 \n 3 \n 4 \n 5]"

      kapok> (let [opts (inspect.opts.new :limit 3)
                   doc (inspect.algebra.surround-many
                         "[" [1 2 3 4 5] "]" opts (fn [i _opts] (to_string i)))]
              (-> (inspect.algebra.format doc 20))
                  io.iodata_to_binary))
      "[1 2 3 ...]"

      kapok> (let [opts (inspect.opts.new :limit 3)
                   doc (inspect.algebra.surround-many
                         "[" [1 2 3 4 5] "]" opts (fn [i _opts] (to_string i)) "!")]
              (-> (inspect.algebra.format doc 20))
                  io.iodata_to_binary))
      "[1! 2! 3! ...]"

  """
  (do-surround-many left docs right (access.get opts #limit) opts fun separator))

(defn- do-surround-many [left [] right _limit _opts _fun _sep]
  (concat left right))

(defn- do-surround-many [left docs right limit _opts fun sep]
  (surround left (do-surround-many docs limit _opts fun sep) right))

(defn- do-surround-many [_docs 0 _opts _fun _sep]
  "...")

(defn- do-surround-many [[h] limit opts fun _sep]
  (fun h (maps.put #limit limit opts)))

(defn- do-surround-many [[h & t] limit opts fun sep] (&when (list? t))
  (let [limit1 (decrement limit)]
    (glue (concat (fun h (maps.put #limit limit1 opts)) sep)
          (do-surround-many t limit1 opts fun sep))))

(defn- do-surround-many [[h & t] limit opts fun _sep]
  (let [limit1 (decrement limit)
        opts1 (maps.put #limit limit1 opts)]
    (glue (concat (fun h opts1) (attr #tail-separator))
          (fun t opts1))))

(defn- decrement [#infinity]
  #infinity)
(defn- decrement [counter]
  (dec counter))

(defn format [d w]
  """The formatting function.

  Takes the maximum width and a document to print as its arguments
  and returns an io data representation of the best layout for the
  document to fit in the given width.
  """
  (format w 0 [{0 (default-mode w) (doc-group d)}]))

(defn- default-mode [#infinity]
  #flat)
(defn- default-mode [_]
  #break)

(defn- fits? [w _] (&when (< w 0))
  :false)
(defn- fits? [_ []]
  :true)
(defn- fits? [_ [{_ _ #doc-line} & _]]
  :true)
(defn- fits? [w [{_ _ #doc-nil} & t]]
  (fits? w t))
(defn- fits? [w [{i m (doc-cons x y)} & t]]
  (fits? w [{i m x} & [{i m y} & t]]))
(defn- fits? [w [{i m (doc-nest x j)} & t]]
  (fits? w [{(+ i j) m x} & t]))
(defn- fits? [w [{i _ (doc-group x)} & t]]
  (fits? w [{i #flat x} & t]))
(defn- fits? [w [{_ _ s} & t]] (&when (binary? s))
  (fits? (- w (byte-size s)) t))
(defn- fits? [w [{_ #flat (doc-break s)} & t]]
  (fits? (- w (byte-size s)) t))
(defn- fits? [_ [{_ #break (doc-break _)} & _]]
  :true)

(defn- format [_ _ []]
  [])
(defn- format [w _ [{i _ #doc-line} & t]]
  [(indent i) & (format w i t)])
(defn- format [w k [{_ _ #doc-nil} & t]]
  (format w k t))
(defn- format [w k [{i m (doc-cons x y)} & t]]
  (format w k [{i m x} & [{i m y} & t]]))
(defn- format [w k [{i m (doc-group x)} & t]]
  (format w k [{i m x} & t]))
(defn- format [w k [{_ _ s} & t]] (&when (binary? s))
  [s & (format w (+ k (byte-size s)) t)])
(defn- format [w k [{_ #flat (doc-break s)} & t]]
  [s & (format w (+ k (byte-size s)) t)])
(defn- format [w k [{i #break (doc-break s)} & t]]
  (let [k1 (+ k (byte-size s))]
    (if (or (== w #infinity)
            (fits? (- w k1) t))
        [s & (format w k1 t)]
      [(indent i) & (format w i t)])))

(defn- indent [0]
  (attr #newline))
(defn- indent [i]
  (io_lib.format "~s~s" [(attr #newline) (binary.copy " " i)]))
