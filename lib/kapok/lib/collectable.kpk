(defprotocol collectable
  """A protocol to traverse data structures.

  The `seq.into/2` function uses this protocol to insert an
  sequential into a collection."""

  (into [collection]
    "Returns a function that collects values alongside
    the initial accumulation value.")
  )


(defimpl collectable list
  (defn into [original]
    {[]
     (fn
       ([list {#cont x}]
        [x & list])
       ([list #done]
        (lists.append original (lists.reverse list)))
       ([_ #halt]
        #ok))}))

(defimpl collectable bitstring
  (require erlang)

  (defn into [original]
    {original
     (fn
       ([acc {#cont x}] (&when (bitstring? x))
        [acc & x])
       ([acc #done]
        (erlang.iolist_to_binary acc))
       ([_ #halt]
        #ok))}))

(defimpl collectable map
  (require maps)

  (defn into [original]
    {original
     (fn
       ([map {#cont {k v}}]
        (maps.put k v map))
       ([map #done]
        map)
       ([_ #halt]
        #ok))}))
