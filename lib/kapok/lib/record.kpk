(ns kapok.record
  """Namespace to work, define and import records.

  Records are simply tuples where the first element is an atom:

      kapok> (is_record {^user, "john", 27})
      true

  This namespace provides conveniences for working with records at
  compilation time, where compile-time field names are used to
  manipulate the tuples, providing fast operations on top of
  the tuples compact structure.

  In Kapok, records are used mostly in two situations:

    1. to work with short, internal data
    2. to interface with Erlang records

  The macros `defrecord` and `defrecord-` can be used to create records
  while `extract` can be used to extract records from Erlang files.
  """
  (require erlang))

(defmacro is-record [data]
  """Checks if the given `data` is a record.

  This is implemented as a mocro so it can be used in guard clauses.

  ## Examples

      kapok> (is_record {^user, "john", 27})
      ^true

      kapok> (is_record {})
      ^false

  """

  `(kapok.core.and (kapok.core.is_tuple ~data)
                   (kapok.core.> (kapok.core.tuple-size ~data) 0)
                   (kapok.core.is_atom (erlang.element 1 ~data))))

(defmacro is-record [data kind]
  """Checks if the given `data` is a record of `kind`.

  This is implemented as a macro so it can be used in guard clauses.

  ## Examples

      kapok> (is_record {^user, "john", 27} ^user)
      ^true

  """
  `(kapok.core.and (kapok.core.is_tuple ~data)
                   (kapok.core.> (kapok.core.tuple-size ~data) 0)
                   (kapok.core.== (erlang.element 1 ~data) ~kind)))
