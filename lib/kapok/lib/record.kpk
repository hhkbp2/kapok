(ns record
  """Namespace to work, define and import records.

  Records are simply tuples where the first element is an atom:

      kapok> (is_record {^user, "john", 27})
      true

  This namespace provides conveniences for working with records at
  compilation time, where compile-time field names are used to
  manipulate the tuples, providing fast operations on top of
  the tuples compact structure.

  In Kapok, records are used mostly in two situations:

    1. to work with short, internal data
    2. to interface with Erlang records

  The macros `defrecord` and `defrecord-` can be used to create records
  while `extract` can be used to extract records from Erlang files.
  """
  (require erlang))

(defmacro is-record [data]
  """Checks if the given `data` is a record.

  This is implemented as a mocro so it can be used in guard clauses.

  ## Examples

      kapok> (is_record {^user, "john", 27})
      ^true

      kapok> (is_record {})
      ^false

  """

  `(core.and (core.is_tuple ~data)
             (core.> (core.tuple-size ~data) 0)
             (core.is_atom (erlang.element 1 ~data))))

(defmacro is-record [data kind]
  """Checks if the given `data` is a record of `kind`.

  This is implemented as a macro so it can be used in guard clauses.

  ## Examples

      kapok> (is_record {^user, "john", 27} ^user)
      ^true

  """
  `(core.and (core.is_tuple ~data)
             (core.> (core.tuple-size ~data) 0)
             (core.== (erlang.element 1 ~data) ~kind)))

;; (defmacro defrecord [name &rest fields]
;;   """Define a record by the specified `name` and `fields`.

;;   The argument `fields` should contain a list of `field`, which is
;;   either a tuple `(key, default_value)` or simply just `key`.
;;   `key` is a keyword to specify record key, `default_value` is
;;   the default value for this key. When the default value is omitted
;;   in the second form, it will be `undefined`.

;;   ## Examples

;;       kapok> (defrecord rr
;;                (:a 1)
;;                :b
;;                (:c 2)
;;                :d)

;;   """
;;   `(lists.foldl (fn [ast]
;;                   (let ({category meta value} ast)
;;                     (core.unless (or (category == 'keyword')
;;                                      (category == 'atom'))
;;                                  (kapok_error:compile_error meta  "invalid ")
;;                         (do

;;                          ))
;;                     )
;;                   (when (or (=== category 'keyword')
;;                                                      (=== category 'atom')))
;;                     )
