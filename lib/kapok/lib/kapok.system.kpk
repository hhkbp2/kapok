(ns kapok.system
  """The system module provides access to variables used or
  maintained by the VM and to functions that interact directly
  with the VM or the host system.
  """

  (require erlang
           file
           filename
           io_lib
           os
           (kapok (io
                   list
                   seq
                   string))))

(defn cwd []
  """Current working directory.

  Returns the current working directory or `:nil` if one
  is not available.
  """
  (case (file.get_cwd)
    ({#ok base}
     (io.chardata-to-string (fix-drive-letter base)))
    (_ :nil)))

(defn- fix-drive-letter [[l \: \/ & rest] &as original] (&when (&and (>= l \A)
                                                                     (<= l \Z)))
  (case (os.type)
    ({#win32 _}
     [(- (+ l \a) \A) \: \/ & rest])
    (_
     original)))

(defn- fix-drive-letter [original]
  original)

(defn cwd! []
  """Current working directory, exception on error.

  Returns the current working directory or raises error.
  """
  (or (cwd)
      ;; TODO revise to use exception
      (throw "could not get a current working directory")))

(defn user-home []
  (case (os.type)
    ({#win32 _}
     (get-windows-home))
    (_
     (get-unix-home))))

(defn user-home! []
  (or (user-home)
      ;; TODO revise to use exception
      (throw "could not find the user home")))

(defn- get-unix-home []
  (get-env "HOME"))

(defn- get-windows-home []
  (filename.absname (or (get-env "USERPROFILE")
                        (let [hd (get-env "HOMEDRIVE")
                              hp (get-env "HOMEPATH")]
                          (and hd
                               hp
                               (io_lib.format "~s~s" [hd hp]))))))

(defn get-env []
  """System environment variables.

  Returns a list of all environment variables. Each variable is given as a
  `{name value}` tuple where `name` and `value` are strings.
  """
  (seq.into (os.getenv)
            #{}
            (fn [var]
              (let [str (io.chardata-to-string var)
                    [k, v] (string.split str "=" [{#parts 2}])]
                {k v}))))

(defn
    #{:check_remote_call :false}
    get-env [varname] (&when (binary? varname))
  """Environment variable value.

  Returns the value of the environment variable `varname` as a binary,
  or `nil` if the environment variable is undefined.
  """
  (case (os.getenv (string.to-char-list varname))
    (:false
     :nil)
    (other
     (list.to-string other))))

(defn stacktrace []
  """Last exception stacktrace.

  Note that the Erlang VM (and therefore this function) does not
  return the current stacktrace but rather the stacktrace of the
  latest exception.

  Inlined by the compiler into `(erlang.get_stacktrace 0)`.
  """

  (erlang.get_stacktrace))
