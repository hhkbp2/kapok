;;; Functions and macros for protocol.
;; -*- Kapok -*-

(ns protocol
  ;; need to use `core' explicitly since core libs
  ;; are not automatically imported or used when compiled.
  (use core)
  (require kapok_error
           kapok_parser
           erlang
           maps
           lists
           code-server
           module
           io_lib))

(defmacro string? [category]
  `(&or (=== ~category #list_string)
        (=== ~category #binary_string)))

(defmacro dot-id? [category]
  `(&or (=== ~category #dot)
        (=== ~category #identifier)))

(defmacro struct-field? [category]
  `(&or (=== ~category #keyword)
        (=== ~category #atom)))

(defmacro def? [id]
  `(&or (=== ~id #defn)
        (=== ~id #defn-)
        (=== ~id #defmacro)
        (=== ~id #defalias)
        (=== ~id #defalias-)))

(defn- validate-field-name [file meta name]
  (case name
    (#__struct__
     (kapok_error.compile_error meta file "invalid field name \"__struct__\""))
    (_
     name)))

(defn- handle-defstruct-fields [file meta args]
  (let [handler (fn
                  ([{c id-meta id-name}] (&when (struct-field? c))
                   (let [name (validate-field-name file id-meta id-name)]
                     {{#keyword id-meta name} {#atom id-meta #nil}}))
                  ([{#list _ [{c id-meta id-name} expr]}] (&when (struct-field? c))
                   (let [name (validate-field-name file id-meta id-name)]
                     {{#keyword id-meta name} expr}))
                  ([{_ ast-meta _}]
                   (kapok_error.compile_error ast-meta file "invalid field arg for defstruct")))
        fields (lists.map handler args)
        tag {{#keyword meta #__struct__}
             {#list meta [{#identifier meta #__MODULE__}]}}]
    [tag & fields]))

(defn- elixir-struct-constructor [meta name fields-list]
  {#list meta [{#identifier meta #defn}
               {#identifier meta name}
               {#literal_list meta []}
               {#map meta fields-list}]}
  )

(defn- struct-constructor [meta name no-tag-fields]
  (let [{list1 list2} (lists.foldl
                       (fn [{{_ k-meta k-name} &as k v} {args-acc vars-acc}]
                         (let [var {#identifier k-meta k-name}
                               arg-pair {#list k-meta [var v]}]
                           {[arg-pair & args-acc]
                            [var k & vars-acc]}))
                       {[] []}
                       no-tag-fields)
        key-args (lists.reverse list1)
        map-fields (lists.reverse list2)
        arguments [{#keyword_key meta #'&key'} & key-args]]
    {#list meta [{#identifier meta #defn}
                 {#identifier meta name}
                 {#literal_list meta arguments}
                 {#map meta map-fields}]}))

(defn- handle-defstruct-derive [[]]
  [])

(defn- handle-defstruct-derive [derives]
  ;; TODO add impl
  (let [acc (lists.foldl (fn [{_ _ d} acc0]
                           (let [r (derive d (__MODULE__) [])]
                             [r & acc0]))
                         []
                         derives)]
    (lists.reverse acc)
    []))

(defn- derive [protocol for _options]
  (assert-protocol! protocol)
  (assert-impl! protocol #map)

  ;; TODO add checking for whether __deriving__ function exists in module impl.
  ;; refer to `protocol.derive' in Elixir for more info.

  (let [impl (module.concat protocol #map)]
    `(defns ~impl
       (defn __impl__ [#protocol]
         ~{#atom [] protocol})

       (defn __impl__ [#for]
         ~{#atom [] for})

       (defn __impl__ [#target]
         ~{#atom [] impl})))
  )

(defn- assert-protocol! [module]
  (case (code-server.ensure-compiled module)
    ({#module module}
     #ok)
    (_
     ;; TODO revise to use exception
     (throw (io_lib.format #"module ~p is not available" [module]))))
  (try (module.#__protocol__ #name)
    (catch
      ((#throw _)
       ;; TODO revise to use exception
       (throw (io_lib.format #"module ~p is no a protocol" [module])))))
  #ok)

(defn- assert-impl! [protocol base]
  (let [impl (module.concat protocol base)]
    (case (code-server.ensure-compiled impl)
      ({#module impl}
       #ok)
      (_
       ;; TODO revise to use exception
       (throw (io_lib.format #"impl ~p is not available" [impl]))))

    (try (impl.#__impl__ #protocol)
      ((protocol
        #ok)
       (other
        ;; TODO revise to use exception
        (throw (io_lib.format #"expected impl ~p to be an implementation of protocol ~p, but got ~p"
                              [impl protocol other]))))
      (catch
          ((#throw _)
           ;; TODO revise to use exception
           (throw (io_lib.format #"impl ~p is not an implementation of a protocol" [impl]))))))
  )

(defn- handle-defstruct [file meta _doc derives args]
  (let [fields (handle-defstruct-fields file meta args)
        fields-list (lists.reverse (lists.foldl (fn [{k v} acc]
                                                  [v k & acc])
                                                []
                                                fields))]
    ;; Returns a list of asts since we need two duplicate functions,
    ;; 1. '__struct__' is for being compactible with elixir protocol
    ;; 2. 'new' is for the kapok struct constructor
    [(elixir-struct-constructor meta #'__struct__' fields-list)
     (struct-constructor meta #'new' (next fields))
     & (handle-defstruct-derive derives)]))

(defmacro defstruct [&rest args]
  """Define a struct."""
  (let [meta (maps.get #meta _&ctx)
        file (maps.get #file _&ctx)]
    (case args
      ([] (kapok_error.compile_error meta file "not enough arguments to define struct"))
      ([{c _ _} &as doc {#literal_list _ derives} & t] (&when (string? c))
       (handle-defstruct file meta doc derives t))
      ([{#literal_list _ derives} & t]
       (handle-defstruct file meta (empty-doc) derives t))
      (t (handle-defstruct file meta (empty-doc) [] t)))))

(defn- handle-defprotocol-clause [file meta _protocol _id {_ _ args-list}] (&when (=== args-list []))
  ;; TODO revise to use exception
  (kapok_error.compile_error meta file "protocol functions expect at least one argument"))

(defn- handle-defprotocol-clause [_file
                                  _meta
                                  _protocol
                                  {_ id-meta id-name} &as id
                                  {_ _ [t & _] &as args-list} &as args]
  (let [arity (length args-list)
        fa {#tuple id-meta [{#atom id-meta id-name} {#number id-meta arity}]}
        def `(defn ~id ~args
               ((impl-for! ~t).~{#atom id-meta id-name} ~@args-list)
               )]
    {fa def}))

(defn- handle-defprotocol-clause [file meta protocol clause]
  (case clause
    ([{#identifier _ _} &as id {#literal_list _ _} &as args {c _ _}] (&when (string? c))
     ;; TODO add doc
     (handle-defprotocol-clause file meta protocol id args))
    ([{#identifier _ _} &as id {#literal_list _ _} &as args]
     (handle-defprotocol-clause file meta protocol id args))
    (_ (kapok_error.compile_error meta file "invalid clause args for defprotocol: ~p" [clause]))))


(defn- builtin []
  [{'atom? #atom}
   {'bitstring? #bitstring}
   {'integer? #integer}
   {'float? #float}
   {'function? #function}
   {'tuple? #tuple}
   {'list? #list}
   {'map? #map}
   {'pid? #pid}
   {'port? #port}
   {'reference? #reference}
   ])

(defn- after-defprotocol [fallback-to-any builtin]
  [
   `(defn impl-for [#{#__struct__ struct}] (&when (atom? struct))
      (struct-impl-for struct))

   `(defn impl-for! [data]
      (let [r (impl-for data)]
        (if r
            r
          ;; TODO revise to use exception
         (throw "undefined protocol"))))

   `(defn- struct-impl-for [struct]
      (let [target (module.concat (__MODULE__) struct)]
        (case (impl-for? target)
          (:true
           (target.__impl__ #target))
          (:false
           (any-impl-for)))))

    (if fallback-to-any
        `(defn- any-impl-for []
          (case (impl-for? (__MODULE__) #any)
            (:true
             (let [m (module.concat (__MODULE__) #any)]
               (m.__impl__ #target)))
            (:false :nil)))
      `(defn- any-impl-for []
        :nil))

    `(defn- impl-for? [target]
      (and (code-server.ensure-compiled? target)
           (function-exported? target #__impl__ 1)))

    &

    (lists.map (fn [{guard mod}]
                 `(defn impl-for [data] (&when (~guard data))
                    (let [target (module.concat (__MODULE__) ~mod)]
                      (case (impl-for? target)
                            (:true
                             (target.__impl__ #target))
                            (:false
                             (any-impl-for))))))
               builtin)
    ]
  )


(defn- handle-defprotocol [file meta id doc fallback-to-any clauses {fa-acc def-acc}]
  (case clauses
    ([]
     (let [fa-list (lists.reverse fa-acc)
           def-list (lists.reverse def-acc)
           ;; Reflection on protocol implementation of Elixir:
           ;; Any protocol module contains three extra functions:
           ;;
           ;;   * `(__protocol__ 1)` - returns the protocol name when `#name` is given,
           ;;     and a alist with the protocol functions and their arities when `#functions`
           ;;     is given
           protocol-name-def {#list meta [{#identifier meta #defn}
                                          {#identifier meta #__protocol__}
                                          {#literal_list meta [{#atom meta #name}]}
                                          {#atom meta (kapok_parser.plain_dot_name id)}]}
           protocol-functions-def {#list meta [{#identifier meta #defn}
                                               {#identifier meta #__protocol__}
                                               {#literal_list meta [{#atom meta #functions}]}
                                               {#literal_list meta fa-list}]}
           after (after-defprotocol fallback-to-any (builtin))
           ]
       {#list meta (lists.append
                    [{#identifier meta #defns}
                     id
                     doc
                     `((require module))
                     protocol-name-def
                     protocol-functions-def
                     & after]
                    def-list)}))
    ([{#list clause-meta clause} & t]
     (let [{fa def} (handle-defprotocol-clause file clause-meta id clause)]
       (handle-defprotocol file meta id doc fallback-to-any t {[fa & fa-acc] [def & def-acc]})))
    ([{_c clause-meta _} & _t]
     (kapok_error.compile_error clause-meta file "invalid clause for defprotocol: ~p" [clauses]))))

(defn- handle-defprotocol [file meta id doc [{#list _ [{#identifier _ #fallback-to-any}]} & clauses]]
  (handle-defprotocol file meta id doc :true clauses {[] []}))

(defn- handle-defprotocol [file meta id doc clauses]
  (handle-defprotocol file meta id doc :false clauses {[] []}))

(defmacro defprotocol [id &rest args]
  """Define a protocol."""
  (let [meta (maps.get #meta _&ctx)
        file (maps.get #file _&ctx)]
    (case id
      ({c1 _ _} (&when (dot-id? c1))
       (case args
         ([] (kapok_error.compile_error meta file "not enough arguments to define protocol"))
         ([{c2 _ _} &as doc & t] (&when (string? c2))
          (handle-defprotocol file meta id doc t))
         (t (handle-defprotocol file meta id (empty-doc) t))))
      (_ (kapok_error.compile_error meta file "invalid id for defprotocol: ~p" [id])))))

(defn- handle-defimpl-clause [{file meta} clause]
  (case clause
    ([{#identifier _ id} & _t] (&when (&or (=== id #require)
                                           (=== id #use)))
     {#ns {#list meta clause}})
    ([{#identifier _ id} {#identifier _ _} & _t] (&when (def? id))
     ;; TODO check the impl defn matches the defprotocol declaration
     {#def {#list meta clause}})
    (_ (kapok_error.compile_error meta file "invalid clause for defimpl: ~p" [clause]))))

(defn- after-defimpl [{_ protocol-meta protocol-name}
                      {_ for-meta for-name}]
  [
   `(defn __impl__ [#protocol]
      ~{#atom protocol-meta protocol-name})

   `(defn __impl__ [#for]
      ~{#atom for-meta for-name})

   `(defn __impl__ [#target]
      (__MODULE__))
   ])

(defn- handle-defimpl [file meta protocol type doc defs {ns-acc defn-acc}]
  (let [{_ protocol-meta _} protocol
        {_ _ type-name} type]
    (case defs
      ([]
       (let [ns-all (lists.reverse ns-acc)
             defn-all (lists.reverse defn-acc)
             p-name (erlang.atom_to_list (kapok_parser.plain_dot_name protocol))
             t-name (erlang.atom_to_list type-name)
             module-name (erlang.list_to_atom
                          (lists.append p-name (lists.append #"." t-name)))
             after (after-defimpl protocol type)]
         {#list meta (lists.append
                      [{#identifier meta #defns}
                       {#identifier protocol-meta module-name}
                       doc
                       {#list protocol-meta ns-all}
                       & after]
                      defn-all)}))
      ([{#list clause-meta clause} & t]
       (case (handle-defimpl-clause {file clause-meta} clause)
         ({#ns handled-ns}
          (handle-defimpl file meta protocol type doc t {[handled-ns & ns-acc] defn-acc}))
         ({#def handled-def}
          (handle-defimpl file meta protocol type doc t {ns-acc [handled-def & defn-acc]}))))
      ([{_c clause-meta _} &as def & _t]
       (kapok_error.compile_error clause-meta file "invalid clause for defimpl: ~p" [def])))))

(defn- handle-defimpl [file meta protocol type doc defs]
  (handle-defimpl file meta protocol type doc defs {[] []}))

(defmacro defimpl [protocol type &rest args]
  """Implement a protocol for the specified type."""
  ;; TODO check type is valid
  (let [meta (maps.get #meta _&ctx)
        file (maps.get #file _&ctx)]
    (case protocol
      ({c _ _} (&when (dot-id? c))
       (case args
         ([] (kapok_error.compile_error meta file "not enough arguments to implement protocol"))
         ([{c _ _} &as doc & t] (&when (&or (=== c #list_string)
                                            (=== c #binary_string)))
          (handle-defimpl file meta protocol type doc t))
         (t (handle-defimpl file meta protocol type (empty-doc) t)))
       )
      (_ (kapok_error.compile_error meta file "invalid protocol for defimpl: ~p" [protocol])))))
