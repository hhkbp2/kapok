;;; Core module for kapok lang.
;; -*- Kapok -*-

;; all functions here are imported for every ns by default.

(ns kapok.core
  (require erlang lists))


(defn abs [number]
  """Returns the arithmetical absolute value of `number`.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (abs -3.33)
      3.33

      kapok> (abs -3)
      3

  """
  (erlang.abs number))

(defn apply [fun args]
  """Invokes the given `fun` with the arugments `args`.

  Inlined by the compiler.

  ## Examples

      kapok> (apply (fn [x] (* 2 x)) [2])
      4

  """
  (erlang.apply fun args))

(defn apply [module function args]
  """Invokes the given `fun` from `module` with the arguments `args`.

  Inlined by the compiler.

  ## Examples

      kapok> (apply lists reverse [1 2 3])
      [3 2 1]

  """
  (erlang.apply module function args))

(defn binary-part [binary start length]
  """Extracts the part of thee binary starting at `start` with length `length`.
  Binary are zero-indexed.

  If `start` or `length` reference in any way outside the binary, an
  `ArgumentError` exception is raised.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (binary-part "foo" 1 2)
      "oo"

  A negative `length` can be used to extract bytes that come *before* the byte
  at `start`:

      kapok> (binary-part "Hello" 5 -3)
      "llo"

  """
  (erlang.binary_part binary start length))

(defn bit-size [bitstring]
  """Returns an integer which is the size in bits of `bitstring`.

  Allowed in guard tests.  Inlined by the compiler.

  ## Examples

      kapok> (bit-size <<(433 (:size 16)) (3 (:size 3))>>)
      19

      kapok> (bit-size <<1 2 3>>)
      24

  """
  (erlang.bit_size bitstring))

(defn byte-size [bitstring]
  """Returns the number of bytes needed to contain `bitstring`.

  That is, if the number of bits in `bitstring` is not divisible by 8, the
  resulting number of bytes will be rounded up (by excess). This operation
  happens in constant time.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (byte-size <<(433 (:size 16)) (3 (:size 3))>>)
      3

      kapok> (byte-size <<1 2 3>>)
      3

  """
  (erlang.byte_size bitstring))

(defn exit [reason]
  """Stops the execution of the calling process with the given reason.

  Since evaluating this function casuses the process to terminate,
  it has no return value.

  Inlined by the compiler.
  """
  (erlang.exit reason))

;; TODO

(defn is-atom [term]
  """Returns `^true` if `term` is an atom; otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_atom term))

(defn is-binary [term]
  """Returns `^true` if `term` is a binary; otherwise `^false`.

  A binary always contains a complete number of bytes.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (is-binary "foo")
      ^true

      kapok> (is-binary <<(1 (:size 3))>>)
      ^false
  """
  (erlang.is_binary term))

(defn is-bitstring [term]
  """Returns `^true` if `term` is a bitstring (including a binary);
  otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (is-bitstring "foo")
      ^true

      kapok> (is-bitstring <<(1 (:size 3))>>)
      ^true

  """
  (erlang.is_bitstring term))

(defn is-boolean [term]
  """Returns `^true` if `term` is either the atom `^true` or the atom `^false`
  (i.e., a boolean); otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_boolean term))

(defn is-builtin [module function arity]
  """Returns `^true` if `(module function arity)` is a BIF implemented in C;
  otherwise `^false`.

  This BIF is useful for builders of closs-reference tools.
  """
  (erlang.is_builtin module function arity))

(defn is-float [term]
  """Returns `^true` if `term` is a floating point number;
  otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_float term))

(defn is-function [term]
  """Returns `^true` if `term` is a function; otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_function term))

(defn is-function [term, arity]
  """Returns `^true` if `term` is a function that can be applied with
  `arity` number of arguments; otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (is-function (fn [x] (* 2 x)) 1)
      ^true

      kapok> (is-function (fn [x] (* 2 x)) 2)
      ^false

  """
  (erlang.is_function term arity))

(defn is-integer [term]
  """Returns `^true` if `term` is an integer; otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_integer term))

(defn is-list [term]
  """Returns `^true` if `term` is a list with zero or more elements;
  otherwist returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_list term))

(defn is-map [term]
  """Returns `^true` if `term` is a map; otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_map term))

(defn is-number [term]
  """Returns `^true` if `term` is an integer or a floating point number;
  otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_number term))

(defn is-pid [term]
  """Returns `^true` if `term` is a pid (process identifier);
  otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_pid term))

(defn is-pmod [term]
  """Returns `^true` if `term` is an instance of a parameterized module;
  otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_pmod term))

(defn is-port [term]
  """Returns `^true` if `term` is a port identifier; otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_port term))

(defn is-reference [term]
  """Returns `^true` if `term` is a reference; otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_reference term))

(defn is-tuple [term]
  """Returns `^true` if `term` is a tuple; otherwise returns `^false`.

  Allowed in guard tests. Inlined by the compiler.
  """
  (erlang.is_tuple term))

;; TODO

(defn send [dest message]
  """Sends a message to the given `dest` and returns the message.

  `dest` may be a remote or local pid, a (local) port, a locally
  registered name, or a tuple `{registered_name, node}` for a registered
  name at another node.

  Inlined by the compiler.
  """
  (erlang.send dest message))

;; Arithmetic Operators

(defn +
  """Returns the sum of numbers. `(+)` return 0.

  Allowed in guard tests and inlined by the compiler only when arity is 1 or 2.

  ## Examples

      kapok> (+)
      0

      kapok> (+ 1 2)
      3

  """
  ([&optional (x 0)] x)
  ([x y &rest more] (lists.foldl (fn [n acc]
                                   (erlang.+ acc n))
                                 x
                                 [y & more])))

(defn -
  """Subtracts all numbers in `rest` from `n` and returns th result.
  If no number is supplied in `rest`, returns the negation of 'n'.

  Allowed in guard tests and inlined by the compiler only when arity is 1 or 2.

  ## Examples

      kapok> (- 2)
      -2

      kapok> (- 1 2)
      -1

  """
  ([x] (erlang.- 0 x))
  ([x y &rest more] (lists.foldl (fn [n acc]
                                   (erlang.- acc n))
                                 x
                                 [y & more])))

(defn *
  """Returns the product of numbers. `(*)` returns 1.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Examples

      kapok> (*)
      1

      kapok> (* 1 2)
      2

  """
  ([&optional (x 1)] x)
  ([x y &rest more] (lists.foldl (fn [n acc]
                                   (erlang.* acc n))
                                 x
                                 [y & more])))

(defn /
  """Returns numerator `n` divided by all of the denominatars in `rest`.
  If no denominator is supplied in `rest`, returns 1/numerator.

  The result is always a float. Use `div` and `rem` if you want
  an integer division or the remainder.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Examples

      kapok> (/ 2)
      0.5

      kapok> (/ 2 1)
      2.0

  """
  ([x] (erlang./ 1 x))
  ([x y &rest more] (lists.foldl (fn [n acc]
                                   (erlang./ acc n))
                                 x
                                 [y & more])))

(defn div [x y]
  """Performs in integer division.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (div 5 2)
      2

  """
  (erlang.div x y))

(defn rem [x y]
  """Computes the remainder of an integer division.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (rem 5 2)
      1

  """
  (erlang.rem x y))

;; Bitwise Operators

(defn bnot [x]
  """Calculates the bitwise NOT of the given argument.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (bnot 2)
      -3

  """
  (erlang.bnot x))

(defalias bit-not bnot
  """Alias to bnot.""")

(defn band [x y &rest more]
  """Calculates the bitwise AND of the given arguments.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Examples

      kapok> (band 9 3)
      1

      kapok> (band 59 9 3)
      1

  """
  (lists.foldl (fn [n acc]
                 (erlang.band n acc))
               x
               [y & more]))

(defalias bit-and band
  """Alias to band.""")

(defn bor [x y &rest more]
  """Calculates the bitwise OR of the given arguments.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Examples

      kapok> (bor 9 3)
      11

  """
  (list.foldl (fn [n acc]
                (erlang.bor n acc))
              x
              [y & more]))

(defalias bit-or bor
  """Alias to bor.""")

(defn bxor [x y &rest more]
  """Calculates the bitwise XOR of the given arguments.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Examples

      kapok> (bxor 9 3)
      10

  """
  (list.foldl (fn [n acc]
                (erlang.bxor n acc))
              x
              [y & more]))

(defalias bit-xor bxor
  """Alias to bxor.""")

(defn bsl [x n]
  """Calculates the result of an arithmetic left bitshift.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (bsl 1 2)
      4

      kapok> (bsl 1 -2)
      0

      kapok> (bsl -1 2)
      -4

      kapok> (bsl -1 -2)
      -1

  """
  (erlang.bsl x n))

(defalias bit-shift-left bsl
  """Alias to bsl.""")

(defn bsr [x n]
  """Calculates the result of an arithmetic right bitshift.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (bsr 1 2)
      0

      kapok> (bsr 1 -2)
      4

      kapok> (bsr -1 2)
      -1

      kapok> (bsr -1 -2)
      -4

  """
  (erlang.bsr x n))

(defalias bit-shift-right bsr
  """Alias to bsr.""")

;; Comparators

(defn- all [_predicate _acc []]
  ^true)
(defn- all [predicate acc [h & t]]
  (case (predicate h acc)
    (^true (all predicate h t))
    (^false ^false)))

(defn <
  """Returns `^true` if the given arguments are in monotonically increasing
  order, otherwise `^false`.

  All terms in Kapok can be compared with each other.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Examples

      kapok> (< 1)
      ^true

      kapok> (< 1 2 2)
      ^false

  """
  ([_x] ^true)
  ([x y &rest more] (all (fn [n acc] (erlang.< acc n))
                         x
                         [y & more])))

(defn >
  """Returns `^true` if the given arguments are in monotonically decreasing
  order, otherwise `^false`.

  All terms in Kapok can be compared with each other.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Examples

      kapok> (> 1)
      ^true

      kapok> (> 3 2 2)
      ^false

  """
  ([_x] ^true)
  ([x y &rest more] (all (fn [n acc] (erlang.> acc n))
                         x
                         [y & more])))

(defn <=
  """Returns `^true` if the given arguments are in monotonically non-decreasing
  order, otherwise `^false`.

  All terms in Kapok can be compared with each other.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Examples

      kapok> (<= 1)
      ^true

      kapok> (<= 1 2 1)
      ^false

  """
  ([_x] ^true)
  ([x y &rest more] (all (fn [n acc] (erlang.<= acc n))
                         x
                         [y & more])))

(defn >=
  """Returns `^true` if the given arguments are in monotonically non-increasing
  order, othenwise `^false`.

  All terms in Kapok can be compared with each other.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Examples

      kapok> (>= 1)
      ^true

      kapok> (>= 3 2 3)
      ^false

  """
  ([_x] ^true)
  ([x y &rest more] (all (fn [n acc] (erlang.>= acc n))
                         x
                         [y & more])))

(defn ==
  """Returns `^true` if the given arguments all have the equivalent value
  (type-independent), otherwise `^false`.

  This operator considers 1 and 1.0 to be equal. For match semantics,
  use '===' instead.

  All terms in Kapok can be compared with each other.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Exapmles

      kapok> (== 1 2)
      ^false

      kapok> (== 1 1.0)
      ^true

  """
  ([_x] ^true)
  ([x y &rest more] (all (fn [n acc] (erlang.== acc n))
                         x
                         [y & more])))

(defn !=
  """Returns `^true` if the given arguments all have the unequal value
  (type-independent), otherwise `^false`.

  All terms in Kapok can be compared with each other.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Examples

      kapok> (!= 1 1.0)
      ^false

      kapok> (!= 1 2)
      ^true

  """
  ([_x] ^true)
  ([x y &rest more]
   (let [{total set} (lists.foldl
                      (fn [n {count acc}]
                        {(+ 1 count) (ordsets.add_element n acc)})
                      {0 (ordsets.new)}
                      [x y & more])]
     (== total (ordsets.size set)))))

(defn ===
  """Returns `^true` if the given arguments do match (identical),
  otherwise `^false`.

  This operator gives the same semantics as the one existing in
  pattern matching, i.e., `1` and `1.0` are equal, but they do not match
  (not identical).

  All terms in Kapok can be compared with each other.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Examples

      kapok> (=== 1 2)
      ^false

      kapok> (=== 1 1.0)
      ^false

  """
  ([_x] ^true)
  ([x y &rest more] (all (fn [n acc] (erlang.=== acc n))
                         x
                         [y & more])))

(defn !==
  """Returns `^true` if the given arguments all do not match (not identical),
  otherwise `^false`.

  All terms in Kapok can be compared with each other.

  Allowed in guard tests and inlined by the compiler only when arity is 2.

  ## Examples

      kapok> (!== 1 2)
      ^true

      kapok> (!== 1 1.0)
      ^false

  """
  ([_x] ^true)
  ([x y &rest more]
   (let [{total set} (lists.foldl
                      (fn [n {count acc}]
                        {(+ 1 count) (sets.add_element n acc)})
                      {0 (sets.new)}
                      [x y & more])]
     (== total (sets.size set)))))

;; Boolean and Short-circuit Boolean Operators

(defn not [x]
  """Returns `^true` if `x` is logical false, otherwise `^false`.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (not ^false)
      ^true

  """
  (erlang.not x))

(defn- all-but-last [_predicate _acc []]
  ^true)
(defn- all-but-last [_predicate _acc [h]]
  h)
(defn- all-but-last [predicate acc [h & t]]
  (case (predicate h acc)
    (^true (all predicate h t))
    (^false ^false)))

(defn- any-but-last [_predicate _acc []]
  ^false)
(defn- any-but-last [_predicate _acc [h]]
  h)
(defn- any-but-last [predicate acc [h & t]]
  (case (predicate h acc)
    (^false (all predicate h t))
    (^true ^true)))

;; TODO get a macro version
(defn and
  """Boolean and (short-circuit).

  Evaluates the given arguments one at a time, from left to right.
  If any one returns `^false`, returns that value and doesn't evaluate
  the left arugments, otherwise it returns the value of the last argument.
  (and) returns `^true`.

  Requires all the arguments except the last to be a boolean since
  it short-curcuits.

  Allowed in guard tests and inlined by the compiler when arity is 2.

  ## Examples

      kapok> (and ^true ^false)
      ^false

      kapok> (and ^true "yay!")
      "yay!"

  """
  ([&optional (x ^true)] x)
  ([x y &rest more] (all-but-last (fn [n _acc] n)
                                  x
                                  [y & more])))

;; TODO get a macro version
(defn or
  """Boolean or (short-circuit).

  Evaluates the given arguments one at a time, from left to right.
  If any one returns `^false`, returns that value and doesn't evaluate
  the left arguments, otherwise it returns the value of the last argument.
  (or) return `^false`.

  Requires all the arguments except the last to be a boolean since
  it short-circuits.

  Allowed in guard tests and inlined by the compiler when arity is 2.

  ## Examples

      kapok> (or ^true ^false)
      ^true

      kapok> (or ^false 42)
      42

  """
  ([&optional (x ^false)] x)
  ([x y &rest more] (any-but-last (fn [n _acc] n)
                                  x
                                  [y & more])))

;; TODO get a macro version
(defn xor [x y]
  """Boolean xor.

  Returns `^true` if `x` and `y` are evaluated to different logical value
  (`^true` or `^false`), otherwise returns `^false`.

  Requires all the arguments to be a boolean.

  Allowed in guard tests. Inlined by the compiler.

  ## Examples

      kapok> (xor ^true ^false)
      ^true

      kapok> (xor ^true ^true)
      ^false

  """
  (erlang.xor x y))
