(defprotocol kapok.inspect
  """The `inspect` protocol is responsible for converting any Kapok
  data structure into an algebra document. This document is then
  formetted, either in pretty printing format or a regular one.

  The `(inspect 2)` function receives the entity to be inspected
  followed by the inspecting options, represented by the struct
  `inspect.opts`.

  Inspection is done using the functions available in `Elixir.Inspect.Algebra`.

  ## Examples

  Many times, inspecting a structure can be implemented in function
  of existing entities. For example, here is `hashset`'s `inspect`
  implementation:

      (defimpl inspect HashSet
        (use Elixir.Inspect.Algebra)
        (defn inspect [dict opts]
          (concat ["#HashSet<" (to_doc (hashset.to-list dict) opts) ">"])))

  The `concat` function comes from `Elixir.Inspect.Algebra` and it
  concatenates algebra documents together. In the example above,
  it is concatenating the string `"HashSet<"` (all strings are
  valid algebra documents that keep their) formatting when pretty
  printed), the document returned by `(inspect.algebra.to-doc 2)` and the
  other string `">"`.

  Since regular strings are valid entities in an algebra document,
  an implementation of inspect may simply return a string,
  although that will devoid it of any pretty-printing.

  # Error handling

  In case there is an error while you structure is being inspected,
  Kapok will automatically fall back to a raw representation.

  You can however access the underlying error by invoking the inspect
  implementation directly. For example, to test inspect.hashset above,
  you can invoke it as:

      (inspect.hashset.inspect (hashset.new) (inspect.opts.new))

  """

  (inspect [thing opts])
  )

(defimpl kapok.inspect Integer
  (require (Elixir.Inspect.Algebra :as alg))

  (defn inspect [term #{:base base} &as opts]
    (-> (Elixir.Integer.to_string term (base-to-value base))
        (prepend-prefix base)
        (alg.color #number opts)))

  (defn- base-to-value [base]
    (case base
      (#binary 2)
      (#decimal 10)
      (#octal 8)
      (#hex 16)))

  (defn- prepend-prefix [value #decimal]
    value)
  (defn- prepend-prefix [<< $- (value :binary) >> base]
    << $- ((prepend-prefix value base) :binary) >>)
  (defn- prepend-prefix [value base]
    (let [prefix (case base
                   (#binary "2r")
                   (#octal "0")
                   (#hex "0x"))]
      << (prefix :binary) (value :binary) >>))
  )

(defimpl kapok.inspect Float
  (require io_lib_format
           (Elixir.IO :as io))

  (defn inspect [term _opts]
    (io.iodata_to_binary (io_lib_format.fwrite_g term)))
  )

(defimpl kapok.inspect BitString
  (require lists
           (Elixir.Integer :as integer)
           (Elixir.Map :as map)
           (Elixir.Inspect.Algebra :as alg)
           (Elixir.IO :as io)
           (kapok (inspect.Integer)))

  (defn inspect [term opts] (&when (binary? term))
    (let [#{:binaries bins
            :base base
            :printable_limit printable-limit} opts]
      (if (and (== base #decimal)
               (or (== bins #as_strings)
                   (and (== bins #infer)
                        (Elixir.String.printable? term printable-limit))))
          (let [inspected (case (escape term $" printable-limit)
                            ({escaped ""} [$" escaped $"])
                            ({escaped _} [$" escaped " ..." $"]))]
            (alg.color (io.iodata_to_binary inspected) #string opts))
        (inspect-bitstring term opts))))

  (defn inspect [term opts]
    (inspect-bitstring term opts))

  (defn- inspect-bitstring ["" opts]
    (alg.color "<< >>" #binary opts))

  (defn- inspect-bitstring [bitstring opts]
    (let [left (alg.color "<< " #binary opts)
          right (alg.color " >>" #binary opts)
          inner (each-bit bitstring (map.get opts #limit) opts)]
      (alg.group (alg.concat (alg.concat left (alg.nest inner 2)) right))))

  (defn- each-bit [_ 0 _]
    " ...")

  (defn- each-bit [<< >> _counter _opts]
    #doc_nil)

  (defn- each-bit [<<(h (:size 8))>> _counter opts]
    (inspect.Integer.inspect h opts))

  (defn- each-bit [<< h (t :bitstring)>> counter opts]
    (alg.flex_glue
      (inspect.Integer.inspect h opts)
      (each-bit t (decrement counter) opts)))

  (defn- each-bit [bitstring _counter opts]
    (let [size (bit-size bitstring)
          <<(h (:size size))>> bitstring]
      << "(" ((inspect.Integer.inspect h opts) :binary)
         " (:size " ((integer.to_string size) :binary) "))" >>))

  (defn- decrement [#infinity]
    #infinity)
  (defn- decrement [counter]
    (dec counter))

  ;; Escaping

  (defn- escape-map [$\a] << $\\ $a >>)
  (defn- escape-map [$\b] << $\\ $b >>)
  (defn- escape-map [$\d] << $\\ $d >>)
  (defn- escape-map [$\e] << $\\ $e >>)
  (defn- escape-map [$\f] << $\\ $f >>)
  (defn- escape-map [$\n] << $\\ $n >>)
  (defn- escape-map [$\r] << $\\ $r >>)
  (defn- escape-map [$\t] << $\\ $t >>)
  (defn- escape-map [$\v] << $\\ $v >>)
  (defn- escape-map [$\\] << $\\ $\\ >>)
  (defn- escape-map [_] :false)

  (defn escape [other char &optional (count #infinity) (fun (fn escape-map 1))]
    (escape other char count [] fun))

  (defn- escape [binary _char 0 acc _fun]
    {(lists.reverse acc) binary})

  (defn- escape [<< char (t :binary) >> char count acc fun]
    (escape t char (decrement count) [<< $\\ char >> & acc] fun))

  (defn- escape [<< (h :utf8) (t :binary) >> char count acc fun]
    (let [value (fun h)
          escaped (or value (escape-char h))]
      (escape t char (decrement count) [escaped & acc] fun)))

  (defn- escape [<< (a (:size 4)) (b (:size 4)) (t :binary) >> char count acc fun]
    (escape t char (decrement count) [<< $\\ $x ((to-hex a)) ((to-hex b)) >> & acc] fun))

  (defn- escape [<< >> _char _count acc _fun]
    {(lists.reverse acc) << >>})

  (defn- escape-char [0] "\\0")

  (defn- escape-char [65279] "\\uFEFF")

  (defn- escape-char [char] (&when (&or (&and (>= char 0x20) (<= char 0x7E))
                                        (&and (>= char 0xA0) (<= char 0xD7FF))
                                        (&and (>= char 0xE000) (<= char 0xFFFD))
                                        (&and (>= char 0x10000) (<= char 0x10FFFF))))
    << (char :utf8) >>)

  (defn- escape-char [char] (&when (< char 0x100))
    (let [<<(a (:size 4)) (b (:size 4))>> <<(char (:size 8))>>]
     << $\\ $x ((to-hex a)) ((to-hex b)) >>))

  (defn- escape-char [char] (&when (< char 0x10000))
    (let [<<(a (:size 4))
            (b (:size 4))
            (c (:size 4))
            (d (:size 4))>> <<(char (:size 16))>>]
     << $\\ $x ${ ((to-hex a)) ((to-hex b)) ((to-hex c)) ((to-hex d)) $} >>))

  (defn- escape-char [char] (&when (< char 0x1000000))
    (let [<<(a (:size 4))
            (b (:size 4))
            (c (:size 4))
            (d (:size 4))
            (e (:size 4))
            (f (:size 4))>> <<(char (:size 24))>>]
     << $\\ $x ${ ((to-hex a))
                  ((to-hex b))
                  ((to-hex c))
                  ((to-hex d))
                  ((to-hex e))
                  ((to-hex f)) $} >>))

  (defn- to-hex [c] (&when (&and (>= c 0) (<= c 9)))
    (+ c $0))
  (defn- to-hex [c] (&when (&and (>= c 10) (<= c 15)))
    (+ (- c 10) $A))

  )

(defimpl kapok.inspect Atom
  (require (Elixir.Inspect.Algebra :as alg)
           (Elixir.IO :as io)
           (kapok (char
                   (inspect.BitString :as bs))))
  (use (kapok ((core :exclude (inspect)))))

  (defn inspect [atom opts]
    (let [{doc key}
          (case atom
            (:false {":false" #boolean})
            (:true {":true" #boolean})
            (:nil {":nil" #boolean})
            (#'' {"#''" #atom})
            (_ (let [b (Elixir.Atom.to_string atom)
                     d (if (valid-atom-identifier? b)
                           << "#" (b :binary) >>
                         (let [{escaped _} (bs.escape b $')
                               eb (io.iodata_to_binary escaped)]
                           << $# $' (eb :binary) $' >>))]
                 {d #atom})))]
      (alg.color doc key opts)))

  ;; Detect if atom is an simple atom which consists of identifier characters
  ;; (no need to quote).
  (defn- valid-atom-identifier? [<<>>]
    :true)

  (defn- valid-atom-identifier? [<< h (t :binary) >>]
      (&when (char.identifier-char? h))
    (valid-atom-identifier? t))

  (defn- valid-atom-identifier? [_]
    :false)
  )

(defimpl kapok.inspect List
  (require (Elixir.IO :as io)
           (Elixir.List :as list)
           (Elixir.Inspect.Algebra :as alg)
           (kapok (inspect.BitString)))

  (defn inspect [[] opts]
    (alg.color "[]" #list opts))

  ;; TODO remove #char_list and :as_char_lists handling according to Elixir 2.0
  (defn inspect [term opts]
    (let [#{:charlists lists
            :char_lists lists-deprecated
            :printable_limit printable-limit} opts
          lists1 (if (and (== lists #infer)
                          (!= lists-deprecated #infer))
                     (case lists-deprecated
                       (#as_char_lists
                        (io.warn
                         "the :char_list inspect option and its #as_char_lists value are deprecated, use the :charlists option and its #as_charlists value instead")
                        #as_charlists)
                       (_
                        (io.warn
                         "the :char_lists inspect option is deprecated, use :charlists instead")
                        lists-deprecated))
                   lists)
          open (alg.color "[" #list opts)
          sep ""
          close (alg.color "]" #list opts)]
    (cond
      (or (== lists1 #as_charlists)
          (and (== lists1 #infer)
               (list.ascii_printable? term printable-limit)))
        (let [inspected (case (inspect.BitString.escape
                               (io.chardata_to_string term) $" printable-limit)
                          ({escaped ""} [$# $" escaped $"])
                          ({escaped _} [$# $" escaped " ..." $"]))]
          (io.iodata_to_binary inspected))
      :true
        (alg.container_doc open term close opts
                           (fn kapok.inspect.algebra to-doc 2)
                           #[:separator sep]))))
  )

(defimpl kapok.inspect Tuple
  (require (Elixir.Tuple :as tuple)
           (Elixir.Inspect.Algebra :as alg))

  (defn inspect [term opts]
    (let [open (alg.color "{" #tuple opts)
          sep ""
          close (alg.color "}" #tuple opts)
          container-opts #[:separator sep :break #flex]]
      (alg.container_doc open (tuple.to_list term) close opts
                         (fn kapok.inspect.algebra to-doc 2) container-opts)))
  )

(defimpl kapok.inspect Map
  (require maps
           (Elixir.Inspect.Algebra :as alg)
           (kapok (inspect.List)))

  (defn inspect [map opts]
    (inspect map "" opts))

  (defn inspect [map name opts]
    (let [map1 (maps.to_list map)
          open (alg.color << "#" (name :binary) "{" >> #map opts)
          sep (alg.color "," #map opts)
          close (alg.color "}" #map opts)]
      (alg.container_doc open map1 close opts (traverse-fun opts)
                         #[:separator sep :break #strict])))

  (defn- traverse-fun [opts]
    (fn [kv o]
      (to-map kv o (alg.color (alg.break) #map opts))))

  (defn- to-map [{key value} opts sep]
    (alg.concat (alg.concat (kapok.inspect.algebra.to-doc key opts) sep)
                (kapok.inspect.algebra.to-doc value opts)))
  )

(defimpl kapok.inspect PID
  (require erlang
           (Elixir.IO :as io))

  (defn inspect [pid _opts]
    << "#PID" ((io.iodata_to_binary (erlang.pid_to_list pid)) :binary) >>)
  )

(defimpl kapok.inspect Port
  (require erlang
           (Elixir.IO :as io))

  (defn inspect [port _opts]
    (io.iodata_to_binary (erlang.port_to_list port)))
  )

(defimpl kapok.inspect Reference
  (require erlang
           (Elixir.IO :as io))

  (defn inspect [ref _opts]
    (let [(op-++ #"#Ref" rest) (erlang.ref_to_list ref)]
      << "#Reference" ((io.iodata_to_binary rest) :binary) >>))
  )

(defimpl kapok.inspect Any
  (require maps
           (kapok ((inspect.Atom :as ins-atom)
                   (inspect.Map :as ins-map))))

  (defn inspect [#{:__struct__ module} &as struct opts]
    (try (module.__struct__)
      ((dunder (if (== (maps.keys dunder) (maps.keys struct))
                   (let [pruned (maps.remove #__exception__
                                  (maps.remove #__struct__ struct))
                         colorless-opts (maps.put #syntax_colors #[] opts)]
                     (ins-map.inspect pruned
                                      (ins-atom.inspect module colorless-opts)
                                      opts))
                  (inspect.Map.inspect struct opts))))
      (catch
          (_ (ins-map.inspect struct opts)))))
  )
