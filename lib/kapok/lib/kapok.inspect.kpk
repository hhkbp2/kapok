(defprotocol kapok.inspect
  """The `inspect` protocol is responsible for converting any Kapok
  data structure into an algebra document. This document is then
  formetted, either in pretty printing format or a regular one.

  The `(inspect 2)` function receives the entity to be inspected
  followed by the inspecting options, represented by the struct
  `inspect.opts`.

  Inspection is done using the functions available in `inspect.algebra`.

  ## Examples

  Many times, inspecting a structure can be implemented in function
  of existing entities. For example, here is `hashset`'s `inspect`
  implementation:

      (defimpl inspect hashset
        (use inspect.algebra)
        (defn inspect [dict opts]
          (concat ["#hashset<" (to-doc (hashset.to-list dict) opts) ">"])))

  The `concat` function comes from `inspect.algebra` and it
  concatenates algebra documents together. In the example above,
  it is concatenating the string `"hashset<"` (all strings are
  valid algebra documents that keep their) formatting when pretty
  printed), the document returned by `(inspect.algebra.to-doc 2)` and the
  other string `">"`.

  Since regular strings are valid entities in an algebra document,
  an implementation of inspect may simply return a string,
  although that will devoid it of any pretty-printing.

  # Error handling

  In case there is an error while you structure is being inspected,
  Kapok will automatically fall back to a raw representation.

  You can however access the underlying error by invoking the inspect
  implementation directly. For example, to test inspect.hashset above,
  you can invoke it as:

      (inspect.hashset.inspect (hashset.new) (inspect.opts.new))

  """

  (inspect [thing opts])
  )

(defimpl kapok.inspect atom
  (require (kapok (atom
                   char
                   inspect.bitstring)))
  (use (kapok ((core :exclude (inspect)))))

  (defn inspect [atom _opts]
    (inspect atom))

  (defn inspect [:false]
    ":false")
  (defn inspect [:true]
    ":true")
  (defn inspect [:nil]
    ":nil")
  (defn inspect [#'']
    ":''")

  (defn
      #{:check_remote_call :false}
      inspect [a]
    (let [binary (atom.to-string a)]
      (cond
        (valid-atom-identifier? binary) << ":" (binary :binary) >>
        :true << $: $' ((inspect.bitstring.escape binary $") :binary) $' >>)))

  ;; Detect if atom is an simple atom which consists of identifier characters
  ;; (no need to quote).
  (defn- valid-atom-identifier? [<< h (t :binary) >>] (&when (char.identifier-char? h))
    (valid-atom-identifier? t))

  (defn- valid-atom-identifier? [<<>>]
    :true)

  (defn- valid-atom-identifier? [_]
    :false))

(defimpl kapok.inspect bitstring
  (require (kapok (access
                   integer
                   string)))

  (defn inspect [thing
                 #{:__struct__ #'kapok.inspect.opts'
                   #binaries bins} &as opts] (&when (binary? thing))
    (if (or (== bins #as_strings)
            (and (== bins #infer)
                 (string.printable? thing)))
        << $" ((escape thing $") :binary) $" >>
      (inspect-bitstring thing opts)))

  (defn inspect [thing opts]
    (inspect-bitstring thing opts))

  ;; Escaping

  (defn escape [other char]
    (escape other char <<>>))

  (defn- escape [<< char (t :binary) >> char binary]
    (escape t char << (binary :binary) $\\ char >>))
  (defn- escape [<< $# ${ (t :binary) >> char binary]
    (escape t char << (binary :binary) $\\ $# ${ >>))
  (defn- escape [<< $\a (t :binary) >> char binary]
    (escape t char << (binary :binary) $\\ $a >>))
  (defn- escape [<< $\b (t :binary) >> char binary]
    (escape t char << (binary :binary) $\\ $b >>))
  (defn- escape [<< $\d (t :binary) >> char binary]
    (escape t char << (binary :binary) $\\ $d >>))
  (defn- escape [<< $\e (t :binary) >> char binary]
    (escape t char << (binary :binary) $\\ $e >>))
  (defn- escape [<< $\f (t :binary) >> char binary]
    (escape t char << (binary :binary) $\\ $f >>))
  (defn- escape [<< $\n (t :binary) >> char binary]
    (escape t char << (binary :binary) $\\ $n >>))
  (defn- escape [<< $\r (t :binary) >> char binary]
    (escape t char << (binary :binary) $\\ $r >>))
  (defn- escape [<< $\\ (t :binary) >> char binary]
    (escape t char << (binary :binary) $\\ $\\ >>))
  (defn- escape [<< $\t (t :binary) >> char binary]
    (escape t char << (binary :binary) $\\ $t >>))
  (defn- escape [<< $\v (t :binary) >> char binary]
    (escape t char << (binary :binary) $\\ $v >>))
  (defn- escape [<< (h :utf8) (t :binary) >> char binary]
    (let [head <<(h :utf8)>>]
     (if (string.printable? head)
         (escape t char (append head binary))
       (let [<< (byte (:size 8)) (h :binary) >> head
             t1 << (h :binary) (t :binary) >>]
         (escape t1 char << (binary :binary) ((escape-char byte) :binary) >>)))))
  (defn- escape [<< h (t :binary) >> char binary]
    (escape t char << (binary :binary) ((escape-char h) :binary) >>))
  (defn- escape [<< >> _char binary]
    binary)

  ;; Also used by Regex
  (defn- escape-char [0]
    << $\\ $0 >>)

  (defn- escape-char [char] (&when (< char 0x100))
    (let [<<(a (:size 4)) (b (:size 4))>> <<(char (:size 8))>>]
     << $\\ $x ((to-hex a)) ((to-hex b)) >>))

  (defn- escape-char [char] (&when (< char 0x10000))
    (let [<<(a (:size 4))
            (b (:size 4))
            (c (:size 4))
            (d (:size 4))>> <<(char (:size 16))>>]
     << $\\ $x ${ ((to-hex a))
                  ((to-hex b))
                  ((to-hex c))
                  ((to-hex d)) $} >>))

  (defn- escape-char [char] (&when (< char 0x1000000))
    (let [<<(a (:size 4))
            (b (:size 4))
            (c (:size 4))
            (d (:size 4))
            (e (:size 4))
            (f (:size 4))>> <<(char (:size 24))>>]
     << $\\ $x ${ ((to-hex a))
                  ((to-hex b))
                  ((to-hex c))
                  ((to-hex d))
                  ((to-hex e))
                  ((to-hex f)) $} >>))

  (defn- to-hex [c] (&when (&and (>= c 0) (<= c 9)))
    (+ c $0))
  (defn- to-hex [c] (&when (&and (>= c 10) (<= c 15)))
    (+ (- c 10) $A))

  (defn- append [<< h (t :binary) >> binary]
    (append t << (binary :binary) h >>))
  (defn- append [<<>> binary]
    binary)

  ;; Bitstrings

  (defn- inspect-bitstring [bitstring opts]
    << ((each-bit bitstring (access.get opts #limit) "<<")) ">>" >>)

  (defn- each-bit [_ 0 acc]
    << acc " ..." >>)

  (defn- each-bit [<< h (t :bitstring)>> counter acc] (&when (!= t <<>>))
    (each-bit t (decrement counter) << acc "(" ((integer.to-string h)) ") " >>))

  (defn- each-bit [<<(h (:size 8))>> _counter acc]
    << acc ((integer.to-string h)) >>)

  (defn- each-bit [bitstring _counter acc]
    (let [size (bit-size bitstring)
          <<(h (:size size))>> bitstring]
     << acc "(" ((integer.to-string h)) " (:size " ((integer.to-string size)) "))" >>))

  (defn- decrement [#infinity]
    #infinity)
  (defn- decrement [counter]
    (dec counter))
  )

(defimpl kapok.inspect list
  (require (kapok (atom
                   inspect.atom
                   inspect.bitstring
                   io)))
  (use (kapok ((inspect.algebra :only (concat
                                       surround-many
                                       to-doc)))))

  (defn inspect [[] _opts]
    "[]")

  (defn
      #{:check_remote_call :false}
      inspect [thing
                 #{:__struct__ #'kapok.inspect.opts'
                   #char_lists lists} &as opts]
    (cond
      (or (== lists #as_char_lists)
          (and (== lists #infer)
               (printable? thing)))
        << $' ((inspect.bitstring.escape (io.chardata-to-string thing) $') :binary) $' >>
      (keyword? thing)
        (surround-many "[" thing "]" opts (fn keyword 2))
      :true
        ;; TODO add alias checking for names in `(fn remote fun arity)` syntax.
        (surround-many "[" thing "]" opts (fn kapok.inspect.algebra to-doc 2))))

  (defn keyword [{key value} opts]
    (concat <<((key-to-binary key)) ": " >> (to-doc value opts)))

  (defn keyword? [[{key _value} & rest]] (&when (atom? key))
    (case (atom.to-char-list key)
      ((op-++ #"kapok." _) :false)
      (_ (keyword? rest))))

  (defn keyword? [[]]
    :true)
  (defn keyword? [_other]
    :false)

  ;; private

  (defn- key-to-binary [key]
    (case (inspect.atom.inspect key)
      (<< "#" right >> right)
      (other other)))

  (defn- printable? [[c & cs]] (&when (&and (integer? c)
                                            (op-and (>= c 32)
                                                    (<= c 126))))
    (printable? cs))
  (defn- printable? [[$\n & cs]] (printable? cs))
  (defn- printable? [[$\r & cs]] (printable? cs))
  (defn- printable? [[$\t & cs]] (printable? cs))
  (defn- printable? [[$\v & cs]] (printable? cs))
  (defn- printable? [[$\b & cs]] (printable? cs))
  (defn- printable? [[$\f & cs]] (printable? cs))
  (defn- printable? [[$\e & cs]] (printable? cs))
  (defn- printable? [[$\a & cs]] (printable? cs))
  (defn- printable? [[]] :true)
  (defn- printable? [_] :false)

  )

(defimpl kapok.inspect tuple
  (require (kapok (tuple)))
  (use (kapok ((inspect.algebra :only (surround-many)))))
  (defn inspect [{} _opts]
    "{}")

  (defn inspect [tuple opts]
    (surround-many "{" (tuple.to-list tuple) "}" opts
                   (fn kapok.inspect.algebra to-doc 2)))
  )

(defimpl kapok.inspect map
  (require maps
           (kapok (inspect.list)))
  (use (kapok ((inspect.algebra :only (concat
                                       nest
                                       surround-many
                                       to-doc)))))

  (defn inspect [map opts]
    (nest (inspect map "" opts) 1))

  (defn inspect [map name opts]
    (let [map1 (maps.to_list map)]
      (surround-many << "#" name "{" >>
                     map1
                     "}"
                     opts
                     (traverse-fun map))))

  (defn- traverse-fun [list]
    (if (inspect.list.keyword? list)
        (fn inspect.list keyword 2)
      (fn to-map 2)))

  (defn- to-map [{key value} opts]
    (concat
     (concat (to-doc key opts) " => ")
     (to-doc value opts)))
  )

(defimpl kapok.inspect integer
  (require (kapok (integer)))

  (defn inspect [thing
                 #{:__struct__ #'kapok.inspect.opts'
                   #base base}]
    (-> (integer.to-string thing (base-to-value base))
        (prepend-prefix base)))

  (defn- base-to-value [base]
    (case base
      (#binary 2)
      (#decimal 10)
      (#octal 8)
      (#hex 16)))

  (defn- prepend-prefix [value #decimal]
    value)
  (defn- prepend-prefix [value base]
    (let [prefix (case base
                   (#binary "2r")
                   (#octal "0")
                   (#hex "0x"))]
      << prefix value >>))

  )

(defimpl kapok.inspect float
  (require io_lib_format
           (kapok (io)))

  (defn
      #{:check_remote_call :false}
      inspect [thing _opts]
    (io.iodata-to-binary (io_lib_format.fwrite_g thing)))
  )


(defimpl kapok.inspect pid
  (require erlang
           (kapok (io)))

  (defn
      #{:check_remote_call :false}
      inspect [pid _opts]
    << "#PID" ((io.iodata-to-binary (erlang.pid_to_list pid))) >>)
  )

(defimpl kapok.inspect port
  (require erlang
           (kapok (io)))

  (defn
      #{:check_remote_call :false}
      inspect [port _opts]
    (io.iodata-to-binary (erlang.port_to_list port)))
  )

(defimpl kapok.inspect reference
  (require erlang
           (kapok (io)))

  (defn
      #{:check_remote_call :false}
      inspect [ref _opts]
    (let [(op-++ #"#ref" rest) (erlang.ref_to_list ref)]
      << "#Reference" ((io.iodata-to-binary rest)) >>))
  )

(defimpl kapok.inspect any
  (require maps
           (kapok (inspect.atom
                   inspect.map)))

  (defn inspect [#{:__struct__ struct} &as map opts]
    (try (struct.__struct__)
      ((dunder (if (== (maps.keys dunder) (maps.keys map))
                   (let [pruned (maps.remove #__exception__
                                             (maps.remove #__struct__ map))]
                     (inspect.map.inspect pruned
                                          (inspect.atom.inspect struct opts)
                                          opts)))))
      (catch
          (_ (inspect.map.inspect map opts)))))
  )
