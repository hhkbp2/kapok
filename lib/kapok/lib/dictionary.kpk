(ns dictionary
  ;; TODO add more docs
  """This module specifies the dictionary API expected to be
  implemented by different dictionaries. It also provides
  functions that redirect to the underlying dictionary, allowing
  a developer to work with different dictionary implementations
  using one API.

  To Create a new dictionary, use the `new` functions defined
  by each dictionary type:

      (hashdict.new)  ;;=> creates an empty hash dictionary

  In the examples below, `dict-impl` means a specific
  `dictionary` implementation, for example `hashdict` or `map`.

  ## Protocols

  Besides implementing the functions in this module, all
  dictionaries are required to implement the `access`
  protocol:

      kapok> (let [dict (dict-impl.new)]
                   dict1 (dict.put dict ^hello world)]
               (dict.get dict ^hello))
      ^world

  As well as the `sequential` and `collectable` protocols.

  ## Match

  Dictionaries are required to implement all operations
  using the match (`===`) operator."""
  )

(defmacro target [dict]
  `(case ~dict
     (#{^'__struct__' x} (&when (atom? x))
      x)
     (m (&when (map? m))
      ^map)
     (l (&when (list? l))
      ^keyword)
     (x
      (unsupported-dict x))))

(defn update [dict key initial fun]
  """Updates a value in `dict` by calling `fun` on the value to
  get a new value. If `key` is not present in `dict` then
  `initial` will be stored as the first value."""

  (let [module (target dict)]
    (module.update dict key initial fun)))

(defn- unsupported-dict [_dict]
  ;; TODO revise to use exception
  (throw "unsupported dict"))
