(ns kapok.process
  """Conveniences for working with processes and the process dictionary.

  Besides the functions available in this module, the `core` module
  exposes and auto-imports some basic functionality related to precesses
  available through the functions:

    * kapok.core.spawn
    * kapok.core.spawn_link
    * kapok.core.spawn_monitor
    * kapok.core.self
    * kapok.core.send

  """
  (require erlang))

(defn alive? [pid]
  """Returns `true` if the precess exists and is alive, that is,
  is not exiting and has not exited. Otherwise, returns `false`.

  `pid` must refer to a process at the local node.
  """
  (erlang.is_process_alive pid))

(defn get []
  """Returns all key-values in the process dictionary as a list of {key, value}.

  ;; Examples

      kapok> (put :key1 :merry)
      kapok> (put :key2 :lambs)
      kapok> (put :key3 {:are, :playing})
      kapok> (get)
      [{:key1, :merry}, {:key2, :lambs}, {:key3, {:are, :playing}}]

  """
  (erlang.get))

(defn get [key]
  """Returns the value for the given `key` in the process dictionary,
  or undefined if `key` does not exist.

  ;; Examples

       kapok> (put :key1 :merry)
       kapok> (put :key2 :lambs)
       kapok> (get :key1)
       :merry

  """
  (erlang.get key))

(defn get-keys []
  """Return all keys in the process dictionary as a list of key.

  ;; Examples

      kapok> (put :dog {:animal,1})
      kapok> (put :cow {:animal,2})
      kapok> (put :lamb {:animal,3})
      kapok> (get_keys)
      [:dog, :cow, :lamb]

  """
  (erlang.get_keys))

(defn get-keys [value]
  """Return all keys that have the given `value`.

  ;; Examples

      kapok> (put :mary {1, 2})
      kapok> (put :had {1, 2})
      kapok> (put :a {1, 2})
      kapok> (put :little {1, 2})
      kapok> (put :dog {1, 3})
      kapok> (put :lamb, {1, 2})
      kapok> (get_keys {1, 2})
      [:mary, :had, :a, :little, :lamb]

  """
  (erlang.get_keys value))

(defn- nillify [:undefined]
  :nil)

(defn- nillify [other]
  other)

(defn put [key value]
  """Stores the given key-value in the process dictionary.

  Returns :nil of `key` does not exist. If `key` exists, the old value
  is replaced with `value` and this function returns the old value.
  """
  (nillify (erlang.put key value)))

(defn delete []
  """Delete all key-value in the process dictionary.

  Returns all key-value in the process dictionary as a list of {key, value}.

  ;; Examples

      kapok> (put :key1 {1 2 3})
      kapok> (put :key2 [:a :b :c])
      kapok> (delete)
      [{:key1, {1, 2, 3}}, {:key2, {:a, :b, :c}}]

  """
  (erlang.erase))

(defn delete [key]
  """Delete the value associated with `key` from the process dictionary.

  Returns {key, value} if the given `key` exists, or :nil if the given `key`
  does not exist.

  ;; Examples

      kapok> (put :key1 {:merry :lambs :are :playing})
      kapok> (let [x (delete :key1)] {x, (delete :key1)})
      {{:merry :lambs :are :playing}, :nil}

  """
  (erlang.delete key))

(defn exit [pid reason]
  """Sends an exit signal with the given `reason` to the `pid`.

  The following behavior applies if `reason` is any term except
  `:normal` or `:kill`:

    1. If `pid` in not trapping exits, `pid` will exit with the given `reason`.
    2. If `pid` is trapping exits, the exit signal is transformed into a message
       `{:EXIT, from, reason}` ande deliveredd to the message queue of `pid`.

  If `reason` is the atom `:normal`, `pid` will not exit (unless it is the
  calling process's pid, in which case it will exit with the reason `:normal`).
  If it is trapping exits, the exit signal is transformed into a message
  `{:EXIT, from, :normal}` and delivered to its message queue.

  If `reason` is the atom `:kill`, that is, if `(exit pid :kill)` called,
  an untrappablee exit signal is sent to `pid`, which will unconditcionally
  exit with exit reason `:killed`.

  Inlined by the compiler.
  """
  (erlang.exit pid reason))

(defn send [dest message options]
  """Sends a message to the given process.

  If the option `:noconnect` is used and sending the message would require
  an auto-connection to another node, the messaage is not sent and
  `:noconnect` is returned.

  If the option `:nosuspend` is used and sending the message would cause
  the sender to be suspended, the message is not sent and `:nosuspend` and
  `:nosuspend` is returned.

  Otherwise the message is sent and `:ok` is returned.

  ;; Examples

      kapok> (send {:name, :node_deos_not_exist} :hi [:noconnect])
      :noconnect
  """
  (erlang.send dest message options))

(defn send-after [dest message time]
  """Sends `message` to 'dest' after `time` milliseconds.

  If `dest` is a pid, it must be the pid of a local precess, dead or alive.
  If `dest` is an atom, it must be the name of a registered process
  which is looked up at the time of delivery. No error is given if the name
  does not refer to a process.

  This function returns a timer reference, which can be read or canceled
  with `:erlang.read_timer`, `:erlang.start_time` and `:erlang.cancel_timer`.
  Note `time` cannot be greater than `4294967295`.

  Finally. the timer will be automatically canceled if the given 'dest' is
  a pid which is not alive or when whe given pid exits. Note that timers
  will not be automatically canceled when `dest` is an atom (as the atom
  resolution is done on delivery).
  """
  (erlang.send_after time dest message))

(defn spawn [fun options]
  """Spawns the given module and function passing the given args
  according to the given options.

  The result depends on the given options. In particular,
  if `:monitor` is given as an option, it will return a tuple
  containing the pid and the monitoring reference, otherwise
  just the spawned process pid.

  It also accepts extra options, for the list of available options
  check http://www.erlang.org/doc/man/erlang.html#spawn_opt-4

  Inlined by the compiler.
  """
  (erlang.spawn_opt fun options))

(defn spawn [module fun args options]
  """Spawns the given module and function passing the given args
  according to the given options.

  The result depends on the given options. In particular,
  if `:monitor` is given as an option, it will return a tuple
  containing the pid and the monitoring reference, otherwise
  just the spawned process pid.

  It also accepts extra options, for the list of available options
  check http://www.erlang.org/doc/man/erlang.html#spawn_opt-4

  Inlined by the compiler.
  """
  (erlang.spawn_opt module fun args options))

(defn monitor [item]
  """The calling process starts monitoring the item given.
  It returns the monitor reference.

  See http://www.erlang.org/doc/man/erlang.html#monitor-2 for more info.

  Inlined by the compiler.
  """
  (erlang.monitor :process item))

(defn demonitor [monitor-ref options]
  """If `monitor-ref` is a reference which the calling process
  obtained by calling `monitor`, this monitoring is turned off.
  If the monitoring is already turned off, nothting happens.

  See http://www.erlang.org/doc/man/erlang.html#demonitor-2 for more info.

  Inlined by the compiler.
  """
  (erlang.demonitor monitor-ref options))

(defn list []
  """Returns a list of process identifiers corresponding to all the processes
  currently existing on the local node.

  Note that a process that is exiting, exists but is not alive, that is,
  `alive?` will return `false` for a process that is existing,
  but its process identifier will be part of the result returned.

  See http://www.erlang.org/doc/man/erlang.html#processes-0 for more info.
  """
  (erlang.processes))

(defn link [pid]
  """Create a link between the calling process and another process
  (or port) `pid`, if there as not such a link already.

  See http://www.erlang.org/doc/man/erlang.html#link-1 for more info.

  Inlined by the compiler.
  """
  (erlang.link pid))

(defn unlink [pid]
  """Removes the link, if there is one, between the calling process and
  the process or port referred to by `pid`. Returns `true` and does not
  fail, even if there is no link or `pid` does not exist.

  See http://www.erlang.org/doc/man/erlang.html#unlink-1 for more info.

  Inlined by the compiler.
  """
  (erlang.unlink pid))

(defn register [pid, name]
  """Associates the name with a pid or a port identifier.
  `name`, which must be an atom, can be used instead of the pid or port
  identifier with the `core.send` function.

  This function will fail with `ArgumentError` if the pid supplied is
  no longer alive, (check with `alive?`) or if the name is already
  registered (check with `whereis`).
  """
  (erlang.register pid name))

(defn unregister [name]
  """Removes the registered name, associated with a pid or a port identifier.

  See http://www.erlang.org/doc/man/erlang.html#unregister-1 for more info.
  """
  (erlang.unregister name))

(defn whereis [name]
  """Returns the pid or port identifier with the registered name.
  Returns `nil` if the name is not registered.

  See http://www.erlang.org/doc/man/erlang.html#whereis-1 for more info.
  """
  (nillify (whereis name)))

(defn group-leader []
  """Returns the pid of the group leader for the process
  which evaluates the function.
  """
  (erlang.group_leader))

(defn group-leader [pid leader]
  """Sets the group leader of `pid` to `leader`.
  Typically, this is used when a process started from a certain shell should
  have a group leader other than `:init`.
  """
  (erlang.group_leader leader pid))

(defn registered []
  """Returns a list of names which have been registered using `register`.
  """
  (erlang.registered))

(defn flag [flag value]
  """Sets certain flags for the process which calls this function.
  Returns the old value of the flag.

  See http://www.erlang.org/doc/man/erlang.html#process_flag-2 for more info.
  """
  (erlang.process_flag flag value))

(defn flag [pid flag value]
  """Sets certain flags for the process `pid`, in the same manner as `(flag 2)`.
  Returns the old value of the flag. The allowed values for `flag` are only
  a subset of these allowed in `(flag 2)`, namely: `save_calls`.

  See http://www.erlang.org/doc/man/erlang.html#process_flag-3 for more info.
  """
  (erlang.process_flag pid flag value))

(defn info [pid]
  """Returns information about the process identified by `pid` or `nil`
  if the process is not alive.
  Use this only for debugging information.

  See http://www.erlang.org/doc/man/erlang.html#process_info-1 for more info.
  """
  (nillify (erlang.process_info pid)))

(defn info [pid :registered_name]
  """Returns information about the process identified by `pid` or `nil`
  if the process is not alive.
  Use this only for debugging information.

  See http://www.erlang.org/doc/man/erlang.html#process_info-2 for more info.
  """
  (case (erlang.process_info pid :registered_name)
    (:undefined :nil)
    ([] {:registered_name, []})
    (other other)))

(defn info [pid spec]
  (nillify (erlang.process_info pid spec)))

