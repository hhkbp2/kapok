(defns kapok.file.stat.impl
  ((require io
            lists
            (kapok (record))))

  (defmacro gen-impl []
    (let [r (record.extract #file_info
                            [{#from_lib "kernel/include/file.hrl"}])
          struct-fields (lists.map (fn [{k d}]
                                     {#list [] [{#atom [] k} {#atom [] d}]})
                          r)
          keys {#literal_list [] (lists.map (fn [x]
                                              {#atom [] (elem x 0)})
                                            r)}
          {r-args size} (lists.foldl (fn [x {acc n}]
                                      (let [k {#keyword [] (elem x 0)}
                                              v {#list [] [{#dot [] {{#identifier [] #erlang}
                                                                    {#identifier [] #element}}}
                                                           {#number [] n}
                                                           {#identifier [] #t}]}]
                                        {[v k & acc] (inc n)}))
                                    {[] 1}
                                    r)
          new-args (lists.reverse r-args)]

      [`(defstruct ~@struct-fields)

       ;; Converts a `file.stat` struct to a `:file_info` record.
       ;; TODO add pattern matching for `pairs` in function argument
       `(defn to-record [#{#__struct__ #'kapok.file.stat'} &as struct]
          (let [values (lists.map (fn [key]
                                    (maps.get key struct))
                         ~keys)]
            (erlang.list_to_tuple [#file_info & values])))

       ;; Converts a `#file_info` record into a `file.stat` struct.
       ;; TODO directly write `t` as a tuple to pattern match its fields
       `(defn from-record [t] (&when (&and (tuple? t)
                                           (== (tuple-size t) ~size)
                                           (== (elem t 0) #file_info)))
              (new ~@new-args))
        ]))
  )

(defns kapok.file.stat
  """A struct responsible to hold file information.

  In Erlang, this struct is represented by a `#file_info` record.
  Therefore this module also provides functions for converting
  between the Erlang record and the Kapok struct.

  Its fields are:

    * `size` - size of file in bytes.

    * `type` - `#device | #directory | #regular | #other`; the type of the file

    * `access` - `#read | #write | #read_write | #none`; the current system
      access to the file.

    * `atime` - the last time the file was read.

    * `mtime` - the last time the file was written.

    * `ctime` - the interpretation of this time field depends on the operating
      system. On Unix, it is the last time the file or the inode was changed.
      In Windows, it is the time of creation.

    * `mode` - the file permissions.

    * `links` - the number of links to this file. This is always 1 for file
      system which have no concept of links.

    * `major-device` - identifies the file system where the file is located.
      In Windows, the number indicates a drive as follows: 0 means A:, 1 means
      B:, and so on.

    * `minor-device` - only valid for character devices on Unix. In all other
      cases, this field is zero.

    * `inode` - gives the inode number. On non-Unix file systems, this field
      will be zero.

    * `uid` - indicates the owner of the file.

    * `gid` - gives the group that the owner of the file belongs to. Will be
      zero for non-Unix file systems.

  The time type returned in `atime`, `mtime`, and `ctime` is dependent on the
  time type set in options. `{#time type}` where type can be `#local`,
  `#universal`, or `#posix`. Default is `#local`.
  """

  ((use (kapok (file.stat.impl))))

  (gen-impl)

  )
