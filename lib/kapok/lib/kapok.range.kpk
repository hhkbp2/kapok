(defns kapok.range
  "A module for defining a range."

  (defstruct
    (:first :nil)
    (:last :nil))

  (defn new [first last]
    "Creates a new range."
    (new :first first :last last))

  (defn range?
    """Returns `:true` if the given argumentn is a range.

    ## Examples

        kapok> (range.range? (range.new 1 3))
        :true

        kapok> (range.range? 0)
        :false

    """
    ([#{:__struct__ #'kapok.range'}]
     :true)
    ([_]
     :false))
  )

(defprotocol kapok.range.iterator
  "A protocol used for iterating range elements."

  (next [first range]
    "Returns the function that calculates the next item.")

  (count [first range]
    "Counts how many items are in the range.")
  )

(defimpl kapok.sequential kapok.range
  (require (kapok (range.iterator)))

  (defn reduce [#{:__struct__ #'kapok.range'
                  :first first
                  :last last} &as range
                acc
                fun]
    (reduce first last acc fun (range.iterator.next first range) (>= last first)))

  (defn- reduce [_x _y {#halt acc} _fun _next _up]
    {#halted acc})

  (defn- reduce [x y {#suspend acc} fun next up]
    {#suspended acc (fn [e]
                      (reduce x y e fun next up))})

  (defn- reduce [x y {#cont acc} fun next :true] (&when (<= x y))
    (reduce (next x) y (fun x acc) fun next :true))

  (defn- reduce [_ _ {#cont acc} _fun _next _up]
    {#done acc})

  (defn member? [#{:__struct__ #'kapok.range'
                   :first first
                   :last last}
                 value]
    (if (<= first last)
        {#ok (and (<= first value) (<= value last))}
        {#ok (and (<= last value) (<= value first))}))

  (defn count [#{:__struct__ #'kapok.range'
                 :first first} &as range]
    {#ok (range.iterator.count first range)})
  )

(defimpl range.iterator integer

  (defn next [first #{:__struct__ #'kapok.range'
                      :last last}] (&when (integer? last))
    (if (>= last first)
        (fn kapok.core inc 1)
      (fn kapok.core dec 1)))

  (defn count [first #{:__struct__ #'kapok.range'
                       :last last}] (&when (integer? last))
    (if (>= last first)
        (inc (- last first))
      (inc (- first last))))
  )

(defimpl kapok.inspect kapok.range
  (use (kapok (inspect.algebra)))

  (defn inspect [#{:__struct__ #'kapok.range'
                   :first first
                   :last last}
                 opts]
    (concat ["(range " (to-doc first opts) " " (to-doc last opts) ")"]))
  )
