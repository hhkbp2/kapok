(ns exception-basics
  (use (io :only (format)))
  )


(defn- generate-exception (1)
  'dummy doc for this function'
  'a')

(defn- generate-exception (2)
  (erlang.throw 'a'))

(defn- generate-exception (3)
  (erlang.exit 'a'))

(defn- generate-exception (4)
  {'EXIT', 'a'})

(defn- generate-exception (5)
  (erlang.error 'a'))

(defn- catcher (n)
  (try (case (generate-exception n)
         (val {n, 'normal', val}))
    (catch
      ((:throw x) {n, 'caught', 'thrown', x})
      ((:exit x) {n, 'caught', 'exited', x})
      ((:error x) {n, 'caught', 'error', x}))))

(defn main ()
  (let [r (lists.map (fn [i]
                       (catcher i))
                     [1 2 3 4 5])]
    (format '~p~n' [r])))
